import openmeteo_requests
import requests_cache
import pandas as pd
from retry_requests import retry
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
import pickle
# from statsmodels.graphics.tsaplots import plot_acf

# 'Setup' the Open-Meteo API client with cache and retry on error
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = openmeteo_requests.Client(session=retry_session)

# Make sure all required weather variables are listed here
# The order of variables in hourly or daily is important to assign them correctly below
url = "https://archive-api.open-meteo.com/v1/archive"
params = {
    "latitude": -8.0539,
    "longitude": -34.8811,
    "start_date": "2000-01-01",
    "end_date": "2009-12-31",
    "daily": ["temperature_2m_max", "temperature_2m_min", "precipitation_sum"]
}
responses = openmeteo.weather_api(url, params=params)

# Process first location. Add a for-loop for multiple locations or weather models
response = responses[0]
#print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
#print(f"Elevation {response.Elevation()} m asl")
#print(f"Timezone {response.Timezone()} {response.TimezoneAbbreviation()}")
#print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

# Process daily data. The order of variables needs to be the same as requested.
daily = response.Daily()
daily_temperature_2m_max = daily.Variables(0).ValuesAsNumpy()
daily_temperature_2m_min = daily.Variables(1).ValuesAsNumpy()
daily_precipitation_sum = daily.Variables(2).ValuesAsNumpy()

daily_data = {"date": pd.date_range(
    start=pd.to_datetime(daily.Time(), unit="s", utc=True),
    end=pd.to_datetime(daily.TimeEnd(), unit="s", utc=True),
    freq=pd.Timedelta(seconds=daily.Interval()),
    inclusive="left"
)}
daily_data["temperature_2m_max"] = daily_temperature_2m_max
daily_data["temperature_2m_min"] = daily_temperature_2m_min
daily_data["precipitation_sum"] = daily_precipitation_sum

daily_dataframe = pd.DataFrame(data=daily_data)
#
daily_dataframe['date'] = pd.to_datetime(daily_dataframe['date'])
daily_dataframe = daily_dataframe.set_index('date')

''''
plt.plot(daily_dataframe.index, daily_dataframe['temperature_2m_max'])
plt.xlabel('Data')
plt.ylabel('Temperatura Máxima (°C)')
plt.title('Temperaturas Máximas Diárias')
plt.show()
'''
t_treino = daily_dataframe[daily_dataframe.index < '2009-01-01'].index.values
t_teste = daily_dataframe[daily_dataframe.index >= '2009-01-01'].index.values
x_treino = daily_dataframe[daily_dataframe.index < '2009-01-01']['temperature_2m_max'].values
x_teste = daily_dataframe[daily_dataframe.index >= '2009-01-01']['temperature_2m_max'].values

modelo = SARIMAX(x_treino, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12)) # original = seasonal_order=(1, 1, 1, 12)
resultado = modelo.fit()

#print(f'coeficientes: {resultado.params}')
#print(f'summary: {resultado.summary()}')

x_pred = resultado.predict(start=len(x_treino), end=len(x_treino)+len(x_teste)-1)


plt.plot(t_treino, x_treino, label='Treino')
plt.plot(t_teste, x_teste, label='Teste')
plt.plot(t_teste, x_pred, label='Predição')
plt.legend()
plt.show()

# Salvar cada variável em um arquivo .pkl separado
with open('t_treino_sarima.pkl', 'wb') as f:
    pickle.dump(t_treino, f)

with open('x_treino_sarima.pkl', 'wb') as f:
    pickle.dump(x_treino, f)

with open('t_teste_sarima.pkl', 'wb') as f:
    pickle.dump(t_teste, f)

with open('x_teste_sarima.pkl', 'wb') as f:
    pickle.dump(x_teste, f)

with open('x_pred_sarima.pkl', 'wb') as f:
    pickle.dump(x_pred, f)
