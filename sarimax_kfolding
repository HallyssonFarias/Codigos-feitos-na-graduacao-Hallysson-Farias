from dados import carregar_arrays_sarima, carregar_arrays_grid
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import KFold

# Carregar e preparar os dados
print(daily_dataframe.head())
#print(daily_dataframe.dtypes)

# Salvar a coluna do tempo para o plot
dates = daily_dataframe['date']

# Converter timestamp para features numéricos
daily_dataframe['year'] = daily_dataframe['date'].dt.year
daily_dataframe['month'] = daily_dataframe['date'].dt.month
daily_dataframe['day'] = daily_dataframe['date'].dt.day
daily_dataframe['dayofweek'] = daily_dataframe['date'].dt.dayofweek

# so comentar cada um desses para diminuir os parâmetros
#daily_dataframe = daily_dataframe.drop("wind_speed_10m_max", axis=1)
#daily_dataframe = daily_dataframe.drop("rain_sum", axis=1)
#daily_dataframe = daily_dataframe.drop("temperature_2m_min", axis=1)

# Separar a variável alvo (temperature_2m_max) das features/'Regressores exógenos'
X = daily_dataframe.drop('temperature_2m_max', axis=1)
y = daily_dataframe['temperature_2m_max']


# Parâmetros do modelo SARIMAX
order = (1, 1, 1)
seasonal_order = (1, 1, 1, 12)

# Configurar a validação cruzada K-Fold
kf = KFold(n_splits=6) # melhor resultado é com 6

# Variáveis para armazenar os resultados
predictions = np.zeros(len(y))
rmse_list = []

# Executar o K-Fold e com regressores exógenos
for train_index, test_index in kf.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Ajustar o modelo SARIMAX
    modelo = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
    resultado = modelo.fit(disp=False)

    # Fazer previsões
    forecast = resultado.get_forecast(steps=len(y_test), exog=X_test)
    mean_forecast = forecast.predicted_mean

    # Armazenar previsões
    predictions[test_index] = mean_forecast

    # Calcular o RMSE e armazenar o resultado
    rmse = np.sqrt(mean_squared_error(y_test, mean_forecast))
    rmse_list.append(rmse)

# Avaliar o modelo com a média do k-fold
mean_rmse = np.mean(rmse_list)
print(f'Mean RMSE: {mean_rmse}')

# Plotar os resultados
plt.figure(figsize=(14, 7))
# plot dos dados reais
plt.plot(dates, y, label='Temperatura Real')

# plot da previsão e teste
plt.plot(dates, predictions, label='Predição SARIMAX', color='red')

# Plot das bandas de rro
upper_bound = predictions + mean_rmse
lower_bound = predictions - mean_rmse
plt.fill_between(dates, lower_bound, upper_bound, color='pink', alpha=0.3, label='Banda de Erro (RMSE)')

# detalhes do gráfico
plt.xlabel('Data')
plt.ylabel('Temperatura')
plt.title('Comparação entre Temperatura Real e Previsão SARIMAX com Banda de Erro (RMSE)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
